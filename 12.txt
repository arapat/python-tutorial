This chapter is about dictionaries.  Dictionaries have keys and values.  The keys are used to find the values. Here is an example of a dictionary in use:
<source lang="python">
def print_menu():
    print('1. Print Phone Numbers')
    print('2. Add a Phone Number')
    print('3. Remove a Phone Number')
    print('4. Lookup a Phone Number')
    print('5. Quit')
    print()

numbers = {}
menu_choice = 0
print_menu()
while menu_choice != 5:
    menu_choice = int(input("Type in a number (1-5): "))
    if menu_choice == 1:
        print("Telephone Numbers:")
        for x in numbers.keys():
            print("Name: ", x, "\tNumber:", numbers[x])
        print()
    elif menu_choice == 2:
        print("Add Name and Number")
        name = input("Name: ")
        phone = input("Number: ")
        numbers[name] = phone
    elif menu_choice == 3:
        print("Remove Name and Number")
        name = input("Name: ")
        if name in numbers:
            del numbers[name]
        else:
            print(name, "was not found")
    elif menu_choice == 4:
        print("Lookup Number")
        name = input("Name: ")
        if name in numbers:
            print("The number is", numbers[name])
        else:
            print(name, "was not found")
    elif menu_choice != 5:
        print_menu()

</source>

And here is my output:

 1. Print Phone Numbers
 2. Add a Phone Number
 3. Remove a Phone Number
 4. Lookup a Phone Number
 5. Quit
 
 Type in a number (1-5): '''2'''
 Add Name and Number
 Name: '''Joe'''
 Number: '''545-4464'''
 Type in a number (1-5): '''2'''
 Add Name and Number
 Name: '''Jill'''
 Number: '''979-4654'''
 Type in a number (1-5): '''2'''
 Add Name and Number
 Name: '''Fred'''
 Number: '''132-9874'''
 Type in a number (1-5): '''1'''
 Telephone Numbers:
 Name: Jill     Number: 979-4654
 Name: Joe      Number: 545-4464
 Name: Fred     Number: 132-9874
 
 Type in a number (1-5): '''4'''
 Lookup Number
 Name: '''Joe'''
 The number is 545-4464
 Type in a number (1-5): '''3'''
 Remove Name and Number
 Name: '''Fred'''
 Type in a number (1-5): '''1'''
 Telephone Numbers:
 Name: Jill     Number: 979-4654
 Name: Joe      Number: 545-4464
 
 Type in a number (1-5): '''5'''

This program is similar to the name list earlier in the chapter on lists.  Here's how the program works.  First the function <code>print_menu</code> is defined.  <code>print_menu</code> just prints a menu that is later used twice in the program.  Next comes the funny looking line <code>numbers = {}</code>.  All that this line does is to tell Python that <code>numbers</code> is a dictionary.  The next few lines just make the menu work.  The lines
<source lang="python">
for x in numbers.keys():
    print("Name:", x, "\tNumber:", numbers[x])
</source>
go through the dictionary and print all the information.  The function <code> numbers.keys()</code> returns a list that is then used by the <code>for</code> loop.  The list returned by <code>keys()</code> is not in any particular order so if you want it in alphabetic order it must be sorted.  Similar to lists the statement <code>numbers[x]</code> is used to access a specific member of the dictionary.  Of course in this case <code>x</code> is a string.  Next the line <code>numbers[name] = phone</code> adds a name and phone number to the dictionary.  If <code>name</code> had already been in the dictionary <code>phone</code> would replace whatever was there before.  Next the lines
<source lang="python">
if name in numbers:
    del numbers[name]
</source>
see if a name is in the dictionary and remove it if it is.  The operator <code>name in numbers</code> returns true if <code>name</code> is in <code>numbers</code> but otherwise returns false.  The line <code>del numbers[name]</code> removes the key <code>name</code> and the value associated with that key.  The lines
<source lang="python">
if name in numbers:
    print("The number is", numbers[name])
</source>
check to see if the dictionary has a certain key and if it does prints out the number associated with it.  Lastly if the menu choice is invalid it reprints the menu for your viewing pleasure.

<!-- \label{firstgrades}-->
A recap: Dictionaries have keys and values.  Keys can be strings or
numbers.  Keys point to values.  Values can be any type of variable
(including lists or even dictionaries (those dictionaries or lists of
course can contain dictionaries or lists themselves (scary right? :-)
))).  Here is an example of using a list in a dictionary:

<source lang="python">
max_points = [25, 25, 50, 25, 100]
assignments = ['hw ch 1', 'hw ch 2', 'quiz   ', 'hw ch 3', 'test']
students = {'#Max': max_points}

def print_menu():
    print("1. Add student")
    print("2. Remove student")
    print("3. Print grades")
    print("4. Record grade")
    print("5. Print Menu")
    print("6. Exit")

def print_all_grades():
    print('\t', end=' ')
    for i in range(len(assignments)):
        print(assignments[i], '\t', end=' ')
    print()
    keys = list(students.keys())
    keys.sort()
    for x in keys:
        print(x, '\t', end=' ')
        grades = students[x]
        print_grades(grades)

def print_grades(grades):
    for i in range(len(grades)):
        print(grades[i], '\t', end=' ')
    print()

print_menu()
menu_choice = 0
while menu_choice != 6:
    print()
    menu_choice = int(input("Menu Choice (1-6): "))
    if menu_choice == 1:
        name = input("Student to add: ")
        students[name] = [0] * len(max_points)
    elif menu_choice == 2:
        name = input("Student to remove: ")
        if name in students:
            del students[name]
        else:
            print("Student:", name, "not found")
    elif menu_choice == 3:
        print_all_grades()
    elif menu_choice == 4:
        print("Record Grade")
        name = input("Student: ")
        if name in students:
            grades = students[name]
            print("Type in the number of the grade to record")
            print("Type a 0 (zero) to exit")
            for i in range(len(assignments)):
                print(i + 1, assignments[i], '\t', end=' ')
            print()
            print_grades(grades)
            which = 1234
            while which != -1:
                which = int(input("Change which Grade: "))
                which -= 1    #same as which = which - 1
                if 0 <= which < len(grades):
                    grade = int(input("Grade: "))
                    grades[which] = grade
                elif which != -1:
                    print("Invalid Grade Number")
        else:
            print("Student not found")
    elif menu_choice != 6:
        print_menu()
</source>

and here is a sample output:

 1. Add student
 2. Remove student
 3. Print grades
 4. Record grade
 5. Print Menu
 6. Exit
 
 Menu Choice (1-6): '''3'''
        hw ch 1         hw ch 2         quiz            hw ch 3         test 
 #Max    25              25              50              25              100 
 
 Menu Choice (1-6): '''5'''
 1. Add student
 2. Remove student
 3. Print grades
 4. Record grade
 5. Print Menu
 6. Exit
 
 Menu Choice (1-6): '''1'''
 Student to add: '''Bill'''
 
 Menu Choice (1-6): '''4'''
 Record Grade
 Student: '''Bill'''
 Type in the number of the grade to record
 Type a 0 (zero) to exit
 1   hw ch 1     2   hw ch 2     3   quiz        4   hw ch 3     5   test 
 0               0               0               0               0 
 Change which Grade: '''1'''
 Grade: '''25'''
 Change which Grade: '''2'''
 Grade: '''24'''
 Change which Grade: '''3'''
 Grade: '''45'''
 Change which Grade: '''4'''
 Grade: '''23'''
 Change which Grade: '''5'''
 Grade: '''95'''
 Change which Grade: '''0'''
 
 Menu Choice (1-6): '''3'''
        hw ch 1         hw ch 2         quiz            hw ch 3         test 
 #Max    25              25              50              25              100
 Bill    25              24              45              23              95 
 
 Menu Choice (1-6): '''6'''

Heres how the program works.  Basically the variable <code>students</code> is a dictionary with the keys being the name of the students and the values being their grades.  The first two lines just create two lists.
The next line <code>students = {'#Max': max_points}</code> creates a new
dictionary with the key {<code>#Max</code>} and the value is set to be <code>[25, 25, 50, 25, 100]</code> (since thats what <code>max_points</code> was when the assignment is made) (I use the key <code>#Max</code> since <code>#</code> is sorted ahead of any alphabetic characters).  Next <code>print_menu</code> is defined.  Next the <code>print_all_grades</code> function is defined in the
lines:
<source lang="python">
def print_all_grades():
    print('\t',end=" ")
    for i in range(len(assignments)):
        print(assignments[i], '\t',end=" ")
    print()
    keys = list(students.keys())
    keys.sort()
    for x in keys:
        print(x, '\t',end=' ')
        grades = students[x]
        print_grades(grades)
</source>

Notice how first the keys are gotten out of the <code>students</code> dictionary with the <code>keys</code> function in the line <code>keys = list(students.keys())</code>.  <code>keys</code> is an iterable, and it is converted to list so all the functions for lists can be used on it.  Next the keys are sorted in the line <code>keys.sort()</code>.  <code>for</code> is used to go through all the keys. The grades are stored as a list inside the dictionary so the assignment <code>grades = students[x]</code> gives <code>grades</code> the list that is stored at the key <code>x</code>.  The function <code>print_grades</code> just prints a list and is defined a few lines later.

The later lines of the program implement the various options of the menu.  The line <code>students[name] = [0] * len(max_points)</code> adds a student to the key of their name.  The notation <code>[0] * len(max_points)</code> just creates a list of 0's that is the same length as the <code>max_points</code> list.  

The remove student entry just deletes a student similar to the telephone book example.  The record grades choice is a little more complex.  The grades are retrieved in the line <code>grades = students[name]</code> gets a reference to the grades of the student <code>name</code>.  A grade is then recorded in the line <code>grades[which] = grade</code>.  You may notice that <code>grades</code> is never put back into the students dictionary (as in no <code>students[name] = grades</code>).  The reason for the missing statement is that <code>grades</code> is actually another name for <code>students[name]</code> and so changing <code>grades</code> changes <code>student[name]</code>.  

Dictionaries provide an easy way to link keys to values.  This can be used to easily keep track of data that is attached to various keys.

{{navigation |previous=Boolean Expressions |next=Using Modules}}
{{BookCat}}
