<!-- things to talk about: chr ord float int len repr s+b s[i] s[i:j] s*n find rfind replace strip -->
<!-- Start with indexing, user chr and ord to show how to do manual int<->string -->
<!-- Repeate the <B> with slices and do actual html -->
<!-- Do some more phrasing -->
<!---->
<!-- Okay here is todays typing exercise: -->
<!-- <source lang="python"> -->
<!-- def to_string(in_int): -->
<!--     "Converts an integer to a string" -->
<!--     out_str = "" -->
<!--     prefix = "" -->
<!--     if in_int < 0: -->
<!--         prefix = "-" -->
<!--         in_int = -in_int         -->
<!--     while in_int / 10 != 0: -->
<!--         out_str = chr(ord('0')+in_int % 10) + out_str -->
<!--         in_int = in_int / 10 -->
<!--     out_str = chr(ord('0')+in_int % 10) + out_str -->
<!--     return prefix + out_str -->
<!--  -->
<!-- def to_int(in_str): -->
<!--     "Converts a string to an integer" -->
<!--     out_num = 0 -->
<!--     if in_str[0] == "-": -->
<!--         multiplier = -1 -->
<!--         in_str = in_str[1:] -->
<!--     else: -->
<!--         multiplier = 1 -->
<!--     for x in range(0,len(in_str)): -->
<!--         out_num = out_num * 10 + ord(in_str[x]) - ord('0') -->
<!--     return out_num * multiplier -->
<!--  -->
<!-- print to_string(2) -->
<!-- print to_string(23445) -->
<!-- print to_string(-23445) -->
<!-- print to_int("14234") -->
<!-- print to_int("12345") -->
<!-- print to_int("-3512") -->
<!-- </source> -->
<!-- The output is: -->
<!-- <source lang="python"> -->
<!-- 2 -->
<!-- 23445 -->
<!-- -23445 -->
<!-- 14234 -->
<!-- 12345 -->
<!-- -3512 -->
<!-- </source> -->
<!--  -->
<!-- So how does it work?  The first detail to notice is that it defines two different functions, one that converts a string to a number and one that converts a number to a string.  Notice that this function does string manipulation similar to how lists can be manipulated.  For example the line <code>if in_str[0] == "-"</code> uses indexing to look at the first letter in the string.  Another thing that strings can do that lists can is using slices.  The line <code>in_str = in_str[1:]</code> uses slices to get all but the first character of in_str (or drops the first letter).  However you cannot use slices or indexing to assign to a letter or location in a string. -->
<!--  -->
<!-- Two new things to introduced are the functions <code>ord</code> and <code>chr</code>.  The  -->
<!-- <code>ord</code> function takes a character (a string of length one) and returns the ASCII value of the character.  The function <code>chr</code> is its inverse and takes a ASCII value and returns a character.  The expression <code>ord(in_str[x]) - ord('0')</code> uses the <code>ord</code> function to find the value of a string.  This works since '0' through '9' have ASCII values that are all in a row.  The ASCII value of '0' is 48 and the ASCII value of '9' is 57 so when we subtract 57-48 we get 9 and this works similarly with other numbers.  The expression <code>chr(ord('0')+in_int % 10)</code> works in a similar manor but in reverse.
-->
And now presenting a cool trick that can be done with strings:
<source lang="python">
def shout(string):
    for character in string:
        print("Gimme a " + character)
        print("'" + character + "'")

shout("Lose")

def middle(string):
    print("The middle character is:", string[len(string) // 2])

middle("abcdefg")
middle("The Python Programming Language")
middle("Atlanta")
</source>

And the output is:

 Gimme a L
 'L'
 Gimme a o
 'o'
 Gimme a s
 's'
 Gimme a e
 'e'
 The middle character is: d
 The middle character is: r
 The middle character is: a

What these programs demonstrate is that strings are similar to lists in several ways.  The <code>shout()</code> function shows that <code>for</code> loops can be used with strings just as they can be used with lists.  The <code>middle</code> procedure shows that that strings can also use the <code>len()</code> function and array indexes and slices.  Most list features work on strings as well.

The next feature demonstrates some string specific features:
<source lang="python">
def to_upper(string):
    ## Converts a string to upper case
    upper_case = ""
    for character in string:
        if 'a' <= character <= 'z':
            location = ord(character) - ord('a')
            new_ascii = location + ord('A')
            character = chr(new_ascii)
        upper_case = upper_case + character
    return upper_case

print(to_upper("This is Text"))
</source>

with the output being:

 THIS IS TEXT

This works because the computer represents the characters of a string as numbers from 0 to 1,114,111.  For example 'A' is 65, 'B' is 66 and ◊ê is 1488. The values are the [[w:en:unicode|unicode]] value.  Python has a function called <code>ord()</code> (short for ordinal) that returns a character as a number.  There is also a corresponding function called <code>chr()</code> that converts a number into a character.  With this in mind the program should start to be clear.  The first detail is the line: <code>if 'a' <= character <= 'z':</code> which checks to see if a letter is lower case.  If it is then the next lines are used.  First it is converted into a location so that a&nbsp;=&nbsp;0, b&nbsp;=&nbsp;1, c&nbsp;=&nbsp;2 and so on with the line: <code>location = ord(character) - ord('a')</code>.  Next the new value is found with <code>new_ascii = location + ord('A')</code>.  This value is converted back to a character that is now upper case.  Note that if you really need the upper case of a letter, you should use <code>u=var.upper()</code> which will work with other languages as well.  

Now for some interactive typing exercise:

 >>> '''# Integer to String'''
 >>> '''2'''
 2
 >>> '''repr(2)'''
 '2'
 >>> '''-123'''
 -123
 >>> '''repr(-123)'''
 '-123'
 >>> '''# String to Integer'''
 >>> '''"23"'''
 '23'
 >>> '''int("23")'''
 23
 >>> '''"23" * 2'''
 '2323'
 >>> '''int("23") * 2'''
 46
 >>> '''# Float to String'''
 >>> '''1.23'''
 1.23
 >>> '''repr(1.23)'''
 '1.23'
 >>> '''# Float to Integer'''
 >>> '''1.23'''
 1.23
 >>> '''int(1.23)'''
 1
 >>> '''int(-1.23)'''
 -1
 >>> '''# String to Float'''
 >>> '''float("1.23")'''
 1.23
 >>> '''"1.23"''' 
 '1.23'
 >>> '''float("123")'''
 123.0

If you haven't guessed already the function <code>repr()</code> can convert an integer to a string and the function <code>int()</code> can convert a string to an integer. The function <code>float()</code> can convert a string to a float.  The <code>repr()</code> function returns a printable representation of something. Here are some examples of this:

 >>> '''repr(1)'''
 '1'
 >>> '''repr(234.14)'''
 '234.14'
 >>> '''repr([4, 42, 10])'''
 '[4, 42, 10]'

The <code>int()</code> function tries to convert a string (or a float) into an integer.  There is also a similar function called <code>float()</code> that will convert an integer or a string into a float.  Another function that Python has is the <code>eval()</code> function.  The <code>eval()</code> function takes a string and returns data of the type that python thinks it found.  For example:

 >>> '''v = eval('123')'''
 >>> '''print(v, type(v))'''
 123 <type 'int'>
 >>> '''v = eval('645.123')'''
 >>> '''print(v, type(v))'''
 645.123 <type 'float'>
 >>> '''v = eval('[1, 2, 3]')'''
 >>> '''print(v, type(v))'''
 [1, 2, 3] <type 'list'>

If you use the <code>eval()</code> function you should check that it returns the type that you expect.

One useful string function is the <code>split()</code> method. Here's an example:

 >>> '''"This is a bunch of words".split()'''
 ['This', 'is', 'a', 'bunch', 'of', 'words']
 >>> '''text = "First batch, second batch, third, fourth"'''
 >>> '''text.split(",")'''
 ['First batch', ' second batch', ' third', ' fourth']

Notice how <code>split()</code> converts a string into a list of strings.  The string is split by whitespace by default or by the optional argument (in this case a comma).
You can also add another argument that tells <code>split()</code> how many times the separator will be used to split the text. For example:

 >>> '''list = text.split(",")'''
 >>> '''len(list)'''
 4
 >>> '''list[-1]'''
 ' fourth'
 >>> '''list = text.split(",", 2)'''
 >>> '''len(list)'''
 3
 >>> '''list[-1]'''
 ' third, fourth'

<!-- TODO add more on strings -->
=== Slicing strings (and lists) ===

Strings can be cut into pieces &mdash; in the same way as it was shown for lists in the previous chapter &mdash; by using the ''slicing'' "operator" <tt>[]</tt>. The slicing operator works in the same way as before: text[first_index:last_index] (in very rare cases there can be another colon and a third argument, as in the example shown below).

In order not to get confused by the index numbers, it is easiest to see them as ''clipping places'', possibilities to cut a string into parts. Here is an example, which shows the clipping places (in yellow) and their index numbers (red and blue) for a simple text string:

<tt>
{| style="text-align:center" cellspacing="0px"
|
| style="width:2ex" |
| style="width:2ex;color:red" |0
| style="width:2ex" |
| style="width:2ex;color:red" |1
| style="width:2ex" |
| style="width:2ex;color:red" |2
| style="width:2ex" |
| style="width:2ex" | ...
| style="width:2ex" |
| style="width:2ex;color:blue" | -2
| style="width:2ex" |
| style="width:2ex;color:blue" | -1
| style="width:2ex" |
| style="width:2ex" |
| style="width:2ex" |
|-
|
|
| style="background:#FFFF88" |&darr;
|
| style="background:#FFFF88" |&darr;
|
| style="background:#FFFF88" |&darr;
|
| style="background:#FFFF88" |&darr;
|
| style="background:#FFFF88" |&darr;
|
| style="background:#FFFF88" |&darr;
|
| style="background:#FFFF88" |&darr;
|
|-
| text = 
|"
| style="background:#FFFF88" |
!S 
| style="background:#FFFF88" |
!T
| style="background:#FFFF88" |
!R
| style="background:#FFFF88" |
!I
| style="background:#FFFF88" |
!N
| style="background:#FFFF88" |
!G
| style="background:#FFFF88" |
|"
|-
|
|
| style="background:#FFFF88" |&uarr;
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |&uarr;
|
|-
|
|
|[:
|
|
|
|
|
|
|
|
|
|
|
|:]
|
|}
</tt>

Note that the red indexes are counted from the beginning of the string and the blue ones from the end of the string backwards. (Note that there is no blue -0, which could seem to be logical at the end of the string. Because <tt>-0 == 0</tt>, -0 means "beginning of the string" as well.)  Now we are ready to use the indexes for slicing operations:

<tt>
{|
|-
|text[1:4] || style="width:3em;text-align:center" | &rarr; || "TRI"
|-
|text[:5] || style="width:3em;text-align:center" | &rarr; || "STRIN"
|-
|text[:-1] || style="width:3em;text-align:center" | &rarr; || "STRIN"
|-
|text[-4:] || style="width:3em;text-align:center" | &rarr; || "RING"
|-
|text[2] || style="width:3em;text-align:center" | &rarr; || "R"
|-
|text[:] || style="width:3em;text-align:center" | &rarr; || "STRING"
|-
|text[::-1] || style="width:3em;text-align:center" | &rarr; || "GNIRTS"
|}
</tt>

<tt>text[1:4]</tt> gives us all of the <tt>text</tt> string between clipping places 1 and 4, "<tt>TRI</tt>". If you omit one of the [first_index:last_index] arguments, you get the beginning or end of the string as default: <tt>text[:5]</tt> gives "<tt>STRIN</tt>". For both <tt>first_index</tt> and <tt>last_index</tt> we can use both the red and the blue numbering schema: <tt>text[:-1]</tt> gives the same as <tt>text[:5]</tt>, because the index -1 is at the same place as 5 in this case. If we do not use an argument containing a colon, the number is treated in a different way: <tt>text[2]</tt> gives us one character following the second clipping point, "<tt>R</tt>". The special slicing operation <tt>text[:]</tt> means "from the beginning to the end" and produces a copy of the entire string (or list, as shown in the previous chapter).

Last but not least, the slicing operation can have a second colon and a third argument, which is interpreted as the "step size": <tt>text[::-1]</tt> is <tt>text</tt> from beginning to the end, with a step size of -1. -1 means "every character, but in the other direction". "<tt>STRING</tt>" backwards is "<tt>GNIRTS</tt>" (test a step length of 2, if you have not got the point here).

All these slicing operations work with lists as well. In that sense strings are just a special case of lists, where the list elements are single characters. Just remember the concept of ''clipping places'', and the indexes for slicing things will get a lot less confusing.

=== Examples ===
<source lang="python">
# This program requires an excellent understanding of decimal numbers.
def to_string(in_int):
    """Converts an integer to a string"""
    out_str = ""
    prefix = ""
    if in_int < 0:
        prefix = "-"
        in_int = -in_int
    while in_int // 10 != 0:
        out_str = str(in_int % 10) + out_str
        in_int = in_int // 10
    out_str = str(in_int % 10) + out_str
    return prefix + out_str

def to_int(in_str):
    """Converts a string to an integer"""
    out_num = 0
    if in_str[0] == "-":
        multiplier = -1
        in_str = in_str[1:]
    else:
        multiplier = 1
    for c in in_str:
        out_num = out_num * 10 + int(c)
    return out_num * multiplier

print(to_string(2))
print(to_string(23445))
print(to_string(-23445))
print(to_int("14234"))
print(to_int("12345"))
print(to_int("-3512"))
</source>

The output is:

 2
 23445
 -23445
 14234
 12345
 -3512

{{navigation |previous=More on Lists|next=File IO}}
{{BookCat}}
